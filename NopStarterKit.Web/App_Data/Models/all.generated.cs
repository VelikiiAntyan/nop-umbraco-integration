using  System;
using  System.Collections.Generic;
using  System.Linq.Expressions;
using  System.Web;
using  Umbraco.Core.Models;
using  Umbraco.Core.Models.PublishedContent;
using  Umbraco.Web;
using  Umbraco.ModelsBuilder;
using  Umbraco.ModelsBuilder.Umbraco;
[assembly: PureLiveAssembly]
[assembly:ModelsBuilderAssembly(PureLive = true, SourceHash = "3130f4c917e7b495")]
[assembly:System.Reflection.AssemblyVersion("0.0.0.1")]


// FILE: models.generated.cs

//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------















namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1046 with alias "BasePage"
	/// <summary>Base Page</summary>
	public partial interface IBasePage : IPublishedContent
	{
		/// <summary>Canonical</summary>
		IPublishedContent Canonical { get; }

		/// <summary>Header Page Title</summary>
		string HeaderPageTitle { get; }

		/// <summary>Hide Children</summary>
		bool HideChildren { get; }

		/// <summary>Meta Description</summary>
		string MetaDescription { get; }

		/// <summary>Meta Keywords</summary>
		string MetaKeywords { get; }

		/// <summary>No Follow</summary>
		bool NoFollow { get; }

		/// <summary>No Index</summary>
		bool NoIndex { get; }

		/// <summary>Old Url</summary>
		string OldUrl { get; }

		/// <summary>Page Script</summary>
		string PageScript { get; }

		/// <summary>Title</summary>
		string PageTitle { get; }

		/// <summary>Hide in Navigation</summary>
		bool UmbracoNaviHide { get; }

		/// <summary>Umbraco Redirect</summary>
		IPublishedContent UmbracoRedirect { get; }

		/// <summary>Umbraco URL Alias</summary>
		string UmbracoUrlAlias { get; }

		/// <summary>Umbraco URL Name</summary>
		string UmbracoUrlName { get; }
	}

	/// <summary>Base Page</summary>
	[PublishedContentModel("BasePage")]
	public partial class BasePage : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "BasePage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BasePage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BasePage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return GetCanonical(this); }
		}

		/// <summary>Static getter for Canonical</summary>
		public static IPublishedContent GetCanonical(IBasePage that) { return that.GetPropertyValue<IPublishedContent>("canonical"); }

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return GetHeaderPageTitle(this); }
		}

		/// <summary>Static getter for Header Page Title</summary>
		public static string GetHeaderPageTitle(IBasePage that) { return that.GetPropertyValue<string>("headerPageTitle"); }

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return GetHideChildren(this); }
		}

		/// <summary>Static getter for Hide Children</summary>
		public static bool GetHideChildren(IBasePage that) { return that.GetPropertyValue<bool>("hideChildren"); }

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return GetMetaDescription(this); }
		}

		/// <summary>Static getter for Meta Description</summary>
		public static string GetMetaDescription(IBasePage that) { return that.GetPropertyValue<string>("metaDescription"); }

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return GetMetaKeywords(this); }
		}

		/// <summary>Static getter for Meta Keywords</summary>
		public static string GetMetaKeywords(IBasePage that) { return that.GetPropertyValue<string>("metaKeywords"); }

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return GetNoFollow(this); }
		}

		/// <summary>Static getter for No Follow</summary>
		public static bool GetNoFollow(IBasePage that) { return that.GetPropertyValue<bool>("noFollow"); }

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return GetNoIndex(this); }
		}

		/// <summary>Static getter for No Index</summary>
		public static bool GetNoIndex(IBasePage that) { return that.GetPropertyValue<bool>("noIndex"); }

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return GetOldUrl(this); }
		}

		/// <summary>Static getter for Old Url</summary>
		public static string GetOldUrl(IBasePage that) { return that.GetPropertyValue<string>("oldUrl"); }

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return GetPageScript(this); }
		}

		/// <summary>Static getter for Page Script</summary>
		public static string GetPageScript(IBasePage that) { return that.GetPropertyValue<string>("pageScript"); }

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return GetPageTitle(this); }
		}

		/// <summary>Static getter for Title</summary>
		public static string GetPageTitle(IBasePage that) { return that.GetPropertyValue<string>("pageTitle"); }

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return GetUmbracoNaviHide(this); }
		}

		/// <summary>Static getter for Hide in Navigation</summary>
		public static bool GetUmbracoNaviHide(IBasePage that) { return that.GetPropertyValue<bool>("umbracoNaviHide"); }

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return GetUmbracoRedirect(this); }
		}

		/// <summary>Static getter for Umbraco Redirect</summary>
		public static IPublishedContent GetUmbracoRedirect(IBasePage that) { return that.GetPropertyValue<IPublishedContent>("umbracoRedirect"); }

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return GetUmbracoUrlAlias(this); }
		}

		/// <summary>Static getter for Umbraco URL Alias</summary>
		public static string GetUmbracoUrlAlias(IBasePage that) { return that.GetPropertyValue<string>("umbracoUrlAlias"); }

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return GetUmbracoUrlName(this); }
		}

		/// <summary>Static getter for Umbraco URL Name</summary>
		public static string GetUmbracoUrlName(IBasePage that) { return that.GetPropertyValue<string>("umbracoUrlName"); }
	}

	/// <summary>HomePage</summary>
	[PublishedContentModel("homePage")]
	public partial class HomePage : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "homePage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public HomePage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<HomePage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Copyright
		///</summary>
		[ImplementPropertyType("copyright")]
		public string Copyright
		{
			get { return this.GetPropertyValue<string>("copyright"); }
		}

		///<summary>
		/// Facebook
		///</summary>
		[ImplementPropertyType("facebook")]
		public string Facebook
		{
			get { return this.GetPropertyValue<string>("facebook"); }
		}

		///<summary>
		/// Footer
		///</summary>
		[ImplementPropertyType("footer")]
		public Archetype.Models.ArchetypeModel Footer
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("footer"); }
		}

		///<summary>
		/// Google Plus
		///</summary>
		[ImplementPropertyType("googlePlus")]
		public string GooglePlus
		{
			get { return this.GetPropertyValue<string>("googlePlus"); }
		}

		///<summary>
		/// Logo
		///</summary>
		[ImplementPropertyType("logo")]
		public string Logo
		{
			get { return this.GetPropertyValue<string>("logo"); }
		}

		///<summary>
		/// News
		///</summary>
		[ImplementPropertyType("news")]
		public Archetype.Models.ArchetypeModel News
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("news"); }
		}

		///<summary>
		/// News Bottom Link
		///</summary>
		[ImplementPropertyType("newsBottomLink")]
		public RJP.MultiUrlPicker.Models.MultiUrls NewsBottomLink
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("newsBottomLink"); }
		}

		///<summary>
		/// News Title
		///</summary>
		[ImplementPropertyType("newsTitle")]
		public string NewsTitle
		{
			get { return this.GetPropertyValue<string>("newsTitle"); }
		}

		///<summary>
		/// Related Category
		///</summary>
		[ImplementPropertyType("relatedCategory")]
		public IEnumerable<IPublishedContent> RelatedCategory
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("relatedCategory"); }
		}

		///<summary>
		/// Related News
		///</summary>
		[ImplementPropertyType("relatedNews")]
		public IEnumerable<IPublishedContent> RelatedNews
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("relatedNews"); }
		}

		///<summary>
		/// Related Products
		///</summary>
		[ImplementPropertyType("relatedProducts")]
		public IEnumerable<IPublishedContent> RelatedProducts
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("relatedProducts"); }
		}

		///<summary>
		/// Rss
		///</summary>
		[ImplementPropertyType("rss")]
		public string Rss
		{
			get { return this.GetPropertyValue<string>("rss"); }
		}

		///<summary>
		/// Site Script: Script on all pages
		///</summary>
		[ImplementPropertyType("siteScript")]
		public string SiteScript
		{
			get { return this.GetPropertyValue<string>("siteScript"); }
		}

		///<summary>
		/// Slider
		///</summary>
		[ImplementPropertyType("slider")]
		public Archetype.Models.ArchetypeModel Slider
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("slider"); }
		}

		///<summary>
		/// Topic Text
		///</summary>
		[ImplementPropertyType("topicText")]
		public IHtmlString TopicText
		{
			get { return this.GetPropertyValue<IHtmlString>("topicText"); }
		}

		///<summary>
		/// Topic Title
		///</summary>
		[ImplementPropertyType("topicTitle")]
		public string TopicTitle
		{
			get { return this.GetPropertyValue<string>("topicTitle"); }
		}

		///<summary>
		/// Twitter
		///</summary>
		[ImplementPropertyType("twitter")]
		public string Twitter
		{
			get { return this.GetPropertyValue<string>("twitter"); }
		}

		///<summary>
		/// Youtube
		///</summary>
		[ImplementPropertyType("youtube")]
		public string Youtube
		{
			get { return this.GetPropertyValue<string>("youtube"); }
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Content Page</summary>
	[PublishedContentModel("contentPage")]
	public partial class ContentPage : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contentPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContentPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContentPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Page Content
		///</summary>
		[ImplementPropertyType("pageContent")]
		public IHtmlString PageContent
		{
			get { return this.GetPropertyValue<IHtmlString>("pageContent"); }
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Page Not Found</summary>
	[PublishedContentModel("pageNotFound")]
	public partial class PageNotFound : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pageNotFound";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PageNotFound(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageNotFound, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Search</summary>
	[PublishedContentModel("search")]
	public partial class Search : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "search";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Search(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Search, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Category Overview</summary>
	[PublishedContentModel("categoryOverview")]
	public partial class CategoryOverview : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "categoryOverview";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CategoryOverview(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CategoryOverview, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Category</summary>
	[PublishedContentModel("category")]
	public partial class Category : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "category";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Category(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Category, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Nop Category Id
		///</summary>
		[ImplementPropertyType("nopCategoryId")]
		public object NopCategoryId
		{
			get { return this.GetPropertyValue("nopCategoryId"); }
		}

		///<summary>
		/// Preview Image
		///</summary>
		[ImplementPropertyType("previewImage")]
		public IPublishedContent PreviewImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("previewImage"); }
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Products Overview</summary>
	[PublishedContentModel("productsOverview")]
	public partial class ProductsOverview : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "productsOverview";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ProductsOverview(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ProductsOverview, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Product</summary>
	[PublishedContentModel("product")]
	public partial class Product : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "product";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Product(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Product, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Category
		///</summary>
		[ImplementPropertyType("category")]
		public IEnumerable<IPublishedContent> Category
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("category"); }
		}

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("description")]
		public string Description
		{
			get { return this.GetPropertyValue<string>("description"); }
		}

		///<summary>
		/// Nop Id
		///</summary>
		[ImplementPropertyType("nopId")]
		public object NopId
		{
			get { return this.GetPropertyValue("nopId"); }
		}

		///<summary>
		/// Product Description
		///</summary>
		[ImplementPropertyType("productDescription")]
		public IHtmlString ProductDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("productDescription"); }
		}

		///<summary>
		/// Product Image
		///</summary>
		[ImplementPropertyType("productImage")]
		public IEnumerable<IPublishedContent> ProductImage
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("productImage"); }
		}

		///<summary>
		/// Related Products
		///</summary>
		[ImplementPropertyType("relatedProducts")]
		public IEnumerable<IPublishedContent> RelatedProducts
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("relatedProducts"); }
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Sub Category</summary>
	[PublishedContentModel("subCategory")]
	public partial class SubCategory : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "subCategory";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SubCategory(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SubCategory, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return this.GetPropertyValue<IPublishedContent>("image"); }
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Sitemap</summary>
	[PublishedContentModel("sitemap")]
	public partial class Sitemap : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sitemap";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Sitemap(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Sitemap, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("description")]
		public IHtmlString Description
		{
			get { return this.GetPropertyValue<IHtmlString>("description"); }
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Cart</summary>
	[PublishedContentModel("cart")]
	public partial class Cart : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cart";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Cart(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Cart, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Login</summary>
	[PublishedContentModel("login")]
	public partial class Login : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "login";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Login(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Login, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Register</summary>
	[PublishedContentModel("register")]
	public partial class Register : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "register";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Register(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Register, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>News Overview</summary>
	[PublishedContentModel("newsOverview")]
	public partial class NewsOverview : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "newsOverview";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public NewsOverview(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NewsOverview, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>News</summary>
	[PublishedContentModel("news")]
	public partial class News : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "news";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public News(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<News, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Date
		///</summary>
		[ImplementPropertyType("date")]
		public DateTime Date
		{
			get { return this.GetPropertyValue<DateTime>("date"); }
		}

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("description")]
		public IHtmlString Description
		{
			get { return this.GetPropertyValue<IHtmlString>("description"); }
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>One page checkout</summary>
	[PublishedContentModel("onePageCheckout")]
	public partial class OnePageCheckout : PublishedContentModel, IBasePage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "onePageCheckout";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public OnePageCheckout(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<OnePageCheckout, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Canonical
		///</summary>
		[ImplementPropertyType("canonical")]
		public IPublishedContent Canonical
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetCanonical(this); }
		}

		///<summary>
		/// Header Page Title: The title of document. When left empty, node's name will be used.
		///</summary>
		[ImplementPropertyType("headerPageTitle")]
		public string HeaderPageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHeaderPageTitle(this); }
		}

		///<summary>
		/// Hide Children
		///</summary>
		[ImplementPropertyType("hideChildren")]
		public bool HideChildren
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetHideChildren(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetMetaKeywords(this); }
		}

		///<summary>
		/// No Follow
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoFollow(this); }
		}

		///<summary>
		/// No Index
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetNoIndex(this); }
		}

		///<summary>
		/// Old Url
		///</summary>
		[ImplementPropertyType("oldUrl")]
		public string OldUrl
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetOldUrl(this); }
		}

		///<summary>
		/// Page Script: Script on this page
		///</summary>
		[ImplementPropertyType("pageScript")]
		public string PageScript
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageScript(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetPageTitle(this); }
		}

		///<summary>
		/// Hide in Navigation: Use this property if you wish to hide this page in the navigation.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Pick a node you wish to redirect to if the user lands on this node.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public IPublishedContent UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: Use this to give a node multiple urls.eg: home,homepage/another-level
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: If you wish to change the URL of the node without changing the node name fill this in.eg: warren
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.BasePage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public string UmbracoFile
		{
			get { return this.GetPropertyValue<string>("umbracoFile"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Nop Customer Id
		///</summary>
		[ImplementPropertyType("nopCustomerId")]
		public object NopCustomerId
		{
			get { return this.GetPropertyValue("nopCustomerId"); }
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}



// EOF
